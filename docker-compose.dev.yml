version: '3.8'

# This application supports both AMD64 (standard PCs/servers) and ARM (Raspberry Pi) architectures
# All used Docker images have multi-architecture support

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - TZ=${TZ:-Europe/Berlin}
      - NEXT_PUBLIC_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT:-4000}:4000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=4000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-backup_schedule}
      - FILE_EXPLORER_BASE_DIR=${FILE_EXPLORER_BASE_DIR:-/host_fs}
      - TZ=${TZ:-Europe/Berlin}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
    volumes:
      - /:/host_fs:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  postgres:
    # PostgreSQL 16 has multi-architecture support (AMD64, ARM64)
    image: postgres:16
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-backup_schedule}
      - TZ=${TZ:-Europe/Berlin}
      - PGTZ=${TZ:-Europe/Berlin}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c timezone='${TZ:-Europe/Berlin}' -c log_timezone='${TZ:-Europe/Berlin}'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 
name: Build and Publish Docker Images

on:
  push:
    branches: [ "master", "main" ]
  # Ermöglicht manuelles Auslösen des Workflows
  workflow_dispatch:

env:
  # Docker Hub Repository
  DOCKER_HUB_REPO: bangertech/backup-pro

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Definiere Berechtigungen für GitHub Token
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Einrichten von QEMU für Multi-Plattform-Builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Einrichten von Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Anmelden bei Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Frontend Image bauen und pushen
      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.DOCKER_HUB_REPO }}:frontend-latest
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_REPO }}:frontend-buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_REPO }}:frontend-buildcache,mode=max

      # Backend Image bauen und pushen
      - name: Build and push Backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.DOCKER_HUB_REPO }}:backend-latest
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_REPO }}:backend-buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_REPO }}:backend-buildcache,mode=max

      # Aktualisierte docker-compose.yml erstellen
      - name: Update docker-compose.yml for Docker Hub
        run: |
          sed -i 's|build:|# build:|g' docker-compose.yml
          sed -i 's|context: ./frontend|# context: ./frontend|g' docker-compose.yml
          sed -i 's|dockerfile: Dockerfile|# dockerfile: Dockerfile|g' docker-compose.yml
          sed -i 's|context: ./backend|# context: ./backend|g' docker-compose.yml
          sed -i '/image: postgres:16/i\    image: ${{ env.DOCKER_HUB_REPO }}:backend-latest' docker-compose.yml
          sed -i '/frontend:/a\    image: ${{ env.DOCKER_HUB_REPO }}:frontend-latest' docker-compose.yml
          cat docker-compose.yml > docker-compose.prod.yml

      # Docker Compose Produktionsdatei hochladen
      - name: Upload docker-compose.prod.yml as artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-compose-prod
          path: docker-compose.prod.yml
          retention-days: 7 